// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var apiUrl = "http://www.omdbapi.com/?apikey=32cd990";

function buildSearchUrl(text) {
  return apiUrl + ("&s=" + text);
}

function unwrapMovies(results) {
  if (results !== undefined) {
    return List.map((function (item) {
                  if (item !== undefined) {
                    return Caml_option.valFromOption(item);
                  } else {
                    throw [
                          Caml_builtin_exceptions.match_failure,
                          /* tuple */[
                            "MovieData.re",
                            30,
                            9
                          ]
                        ];
                  }
                }), List.filter((function (optionalItem) {
                        return optionalItem !== undefined;
                      }))(results));
  } else {
    return /* [] */0;
  }
}

function unwrapError(error) {
  if (error !== undefined) {
    return error;
  } else {
    return "Unknown error";
  }
}

function decodeResults(json) {
  return /* record */[
          /* response */Json_decode.field("Response", Json_decode.string, json),
          /* errorMessage */Json_decode.optional((function (param) {
                  return Json_decode.field("Error", Json_decode.string, param);
                }), json),
          /* results */Json_decode.optional((function (param) {
                  return Json_decode.field("Search", (function (param) {
                                return Json_decode.list((function (param) {
                                              return Json_decode.optional((function (json) {
                                                            return /* record */[
                                                                    /* id */Json_decode.field("imdbID", Json_decode.string, json),
                                                                    /* title */Json_decode.field("Title", Json_decode.string, json),
                                                                    /* poster */Json_decode.field("Poster", Json_decode.string, json),
                                                                    /* year */Json_decode.field("Year", Json_decode.string, json)
                                                                  ];
                                                          }), param);
                                            }), param);
                              }), param);
                }), json)
        ];
}

function searchMovies(text) {
  return fetch(buildSearchUrl(text)).then((function (prim) {
                    return prim.json();
                  })).then((function (json) {
                  return Promise.resolve(decodeResults(json));
                })).then((function (param) {
                if (param[/* response */0] === "True") {
                  return Promise.resolve(unwrapMovies(param[/* results */2]));
                } else {
                  return Js_exn.raiseError(unwrapError(param[/* errorMessage */1]));
                }
              }));
}

var Api = /* module */[
  /* decodeResults */decodeResults,
  /* searchMovies */searchMovies
];

var defaultPlaceholderPoster = "https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg";

exports.defaultPlaceholderPoster = defaultPlaceholderPoster;
exports.apiUrl = apiUrl;
exports.buildSearchUrl = buildSearchUrl;
exports.unwrapMovies = unwrapMovies;
exports.unwrapError = unwrapError;
exports.Api = Api;
/* No side effect */
